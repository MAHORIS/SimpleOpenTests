using System;
using System.Dynamic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SimpleOpenTests.UnitTesting
{
    [TestClass]
    public class ReflectionAssertTest
    {
        [TestMethod]
        public void CultureTest()
        {
            // store current culture.
            var thread = System.Threading.Thread.CurrentThread;
            var currentCulture = thread.CurrentCulture;
            var currentUICulture = thread.CurrentUICulture;
            var newCultureName = string.Empty;
            Exception ex = null;

            // set "en-US".
            newCultureName = "en-US";
            thread.CurrentCulture = new System.Globalization.CultureInfo(newCultureName);
            thread.CurrentUICulture = new System.Globalization.CultureInfo(newCultureName);
            Console.WriteLine("CurrentCulture:{0} => {1}", currentCulture.Name, newCultureName);
            Console.WriteLine("CurrentUICulture:{0} => {1}", currentUICulture.Name, newCultureName);
            ex = new Exception();
            StringAssert.Contains(ex.Message, "was thrown");

            // set "ja-JP".
            newCultureName = "ja-JP";
            thread.CurrentCulture = new System.Globalization.CultureInfo(newCultureName);
            thread.CurrentUICulture = new System.Globalization.CultureInfo(newCultureName);
            Console.WriteLine("CurrentCulture:{0} => {1}", currentCulture.Name, newCultureName);
            Console.WriteLine("CurrentUICulture:{0} => {1}", currentUICulture.Name, newCultureName);
            ex = new Exception();
            Assert.IsFalse(ex.Message.Contains("was thrown"));

            // restore culture.
            thread.CurrentCulture = new System.Globalization.CultureInfo(currentCulture.Name);
            thread.CurrentUICulture = new System.Globalization.CultureInfo(currentUICulture.Name);
            Console.WriteLine("CurrentCulture:{0} => {1}", currentCulture.Name, newCultureName);
            Console.WriteLine("CurrentUICulture:{0} => {1}", currentUICulture.Name, newCultureName);
        }

        [TestMethod]
        public void HasProperty_2args_Test()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            ReflectionAssert.HasProperty(diActual, propName);
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_ActualNullTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(null, propName); // actual = null
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "actual");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_PropertyNameNullTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            //var propName = "Name"; // exists.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, (string)null); // propertyName = null
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyName");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_PropertyNameEmptyTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            //var propName = "Name"; // exists.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, string.Empty); // propertyName = string.Empty
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyName");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_PropertyNameNotExistTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "NoName"; // exists.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, propName);
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            //StringAssert.Contains(exception.InnerException.Message, new ArgumentException().Message);
            StringAssert.Contains(exception.InnerException.Message, propName);
        }

        // *** dynamic is not supported.

        [TestMethod]
        [ExpectedException(typeof(Microsoft.CSharp.RuntimeBinder.RuntimeBinderException))]
        public void HasProperty_2args_dynamic_Test()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            dynamic dynamicActual = new ExpandoObject();
            dynamicActual.Name = diActual.Name;
            ReflectionAssert.HasProperty(dynamicActual, propName);
        }

        [TestMethod]
        public void HasProperty_2args_msg_Test()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            var message = "message";
            ReflectionAssert.HasProperty(diActual, propName, message);
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_msg_ActualNullTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            var message = "AdditionalMessage.";
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(null, propName, message); // actual = null.
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            StringAssert.Contains(exception.Message, message);
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "actual");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_msg_PropertyNameNullTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            //var propName = "Name"; // exists.
            var message = "AdditionalMessage.";
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, (string)null, message);
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            StringAssert.Contains(exception.Message, message);
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyName");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_msg_PropertyNameEmptyTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            //var propName = "Name"; // exists.
            var message = "AdditionalMessage.";
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, string.Empty, message);
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            StringAssert.Contains(exception.Message, message);
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyName");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_2args_msg_PropertyNameNotExistTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "NoName"; // exists.
            var message = "AdditionalMessage.";
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, propName, message);
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            StringAssert.Contains(exception.Message, message);
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            //StringAssert.Contains(exception.InnerException.Message, new ArgumentException().Message);
            StringAssert.Contains(exception.InnerException.Message, propName);
        }

        [TestMethod]
        public void HasProperty_3args_Test()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            var propType = typeof(string); // string.
            ReflectionAssert.HasProperty(diActual, propName, propType);
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_3args_ActualNullTTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            var propType = typeof(string); // string.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(null, propName, propType); // actual = null
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "actual");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_3args_PropertyNameNullTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            //var propName = "Name"; // exists.
            var propType = typeof(string); // string.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, (string)null, propType); // propertyName = null
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyName");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_3args_PropertyNameEmptyTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            //var propName = "Name"; // exists.
            var propType = typeof(string); // string.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, string.Empty, propType); // propertyName = string.Empty
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyName");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_3args_PropertyNameNotExistTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "NoName"; // exists.
            var propType = typeof(string); // string.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, propName, propType);
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            //StringAssert.Contains(exception.InnerException.Message, new ArgumentException().Message);
            StringAssert.Contains(exception.InnerException.Message, propName);
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_3args_PropertyTypeNullTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            //var propType = typeof(string); // string.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, propName, (Type)null); // propertyType = null
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentNullException));
            StringAssert.Contains(exception.InnerException.Message, new ArgumentNullException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyType");
        }

        [TestMethod] // do not use ExpectedExceptionAttribute().
        public void HasProperty_3args_PropertyTypeInvalidTest()
        {
            var dnActual = Directory.GetCurrentDirectory();
            var diActual = new DirectoryInfo(dnActual);
            var propName = "Name"; // exists.
            //var propType = typeof(string); // string.
            Exception exception = null;
            try
            {
                ReflectionAssert.HasProperty(diActual, propName, typeof(int)); // propertyType = typeof(int)
            }
            catch (ReflectionAssertException ex)
            {
                Console.WriteLine(ex.Message);
                exception = ex;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            Assert.IsNotNull(exception);
            Assert.IsInstanceOfType(exception, typeof(ReflectionAssertException));
            StringAssert.Contains(exception.Message, "ReflectionAssert.HasProperty");
            Assert.IsNotNull(exception.InnerException);
            Assert.IsInstanceOfType(exception.InnerException, typeof(ArgumentException));
            StringAssert.Contains(exception.InnerException.Message, new InvalidCastException().Message);
            StringAssert.Contains(exception.InnerException.Message, "propertyType");
        }
    }
}
